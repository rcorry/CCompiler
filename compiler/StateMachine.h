#ifndef STATE_MACHINE
#define STATE_MACHINE
#include "debug.h"
#include "Token.h"
//#include "scanner.h"

enum MachineState {
	START_STATE,
	// Reserved Words:
	VOID_STATE, MAIN_STATE, INT_STATE, COUT_STATE, FOR_STATE, WHILE_STATE,
	// Relational Operators:
    EQUAL_STATE,LESS_STATE, LESSEQUAL_STATE, GREATER_STATE, GREATEREQUAL_STATE, NOTEQUAL_STATE, NOT_STATE, AND_STATE, OR_STATE, BITAND_STATE, BITOR_STATE,
	// Other Operators:
    INSERTION_STATE, DOUBLEINSERTION_STATE, ASSIGNMENT_STATE, PLUS_STATE, MINUS_STATE, TIMES_STATE, DIVIDE_STATE, EXPONENT_STATE,
    PLUSEQUAL_STATE, MINUSEQUAL_STATE, TIMESEQUAL_STATE, DIVIDEEQUAL_STATE,
	// Other Characters:
	SEMICOLON_STATE, LPAREN_STATE, RPAREN_STATE, LCURLY_STATE,
    RCURLY_STATE,
	// Other Token Types:
	IDENTIFIER_STATE, INTEGER_STATE,
    CANTMOVE_STATE, EOF_STATE, SINGLE_LINE_COMMENT_STATE, BLOCK_COMMENT_STATE, EXIT_STATE,
	LAST_STATE
	};

enum CharacterType {
	LETTER_CHAR, DIGIT_CHAR, WHITESPACE_CHAR, PLUS_CHAR, MINUS_CHAR, LESS_CHAR, EQUAL_CHAR, GREATER_CHAR, AND_CHAR, OR_CHAR,
    NOT_CHAR, TIMES_CHAR, DIVIDE_CHAR, SEMICOLON_CHAR, LPAREN_CHAR, RPAREN_CHAR, LCURLY_CHAR, RCURLY_CHAR,
    BAD_CHAR, EOF_CHAR, NEWLINE_CHAR,
	LAST_CHAR
	};


class StateMachineClass {

public:
    StateMachineClass();
    MachineState UpdateState(char currentCharacter, TokenType & correspondingTokenType);


private:
    MachineState mCurrentState;
    MachineState mLegalMoves[LAST_STATE][LAST_CHAR];
    TokenType mCorrespondingTokenTypes[LAST_STATE];
};

#endif //STATE_MACHINE